if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 0);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 2);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 3);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 4);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 5);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 6);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 7);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 8);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 9);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 10);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 11);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 12);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 13);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 14);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 15);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 16);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 17);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 18);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 19);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 20);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 21);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 22);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 23);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 24);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 25);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 26);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 27);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 28);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 29);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 30);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 31);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 32);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 33);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 34);

} else if (tid0 == type_f32_cm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 35);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 36);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 37);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 38);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 39);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 40);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 41);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 42);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 43);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 44);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 45);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 46);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 47);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 48);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 49);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 50);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 51);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 52);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 53);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 54);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 55);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 56);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 57);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 58);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 59);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 60);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 61);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 62);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 63);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 64);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 65);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 66);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 67);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 68);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 69);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 70);

} else if (tid0 == type_f32_cm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 71);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 72);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 73);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 74);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 75);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 76);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 77);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 78);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 79);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 80);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 81);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 82);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 83);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 84);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 85);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 86);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 87);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 88);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 89);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 90);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 91);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 92);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 93);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 94);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 95);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 96);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 97);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 98);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 99);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 100);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 101);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 102);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 103);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 104);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 105);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 106);

} else if (tid0 == type_f32_cm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 107);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 108);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 109);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 110);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 111);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 112);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 113);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 114);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 115);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 116);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 117);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 118);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 119);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 120);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 121);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 122);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 123);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 124);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 125);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 126);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 127);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 128);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 129);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 130);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 131);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 132);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 133);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 134);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 135);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 136);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 137);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 138);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 139);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 140);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 141);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 142);

} else if (tid0 == type_f32_cm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 143);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 144);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 145);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 146);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 147);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 148);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 149);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 150);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 151);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 152);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 153);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 154);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 155);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 156);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 157);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 158);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 159);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 160);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 161);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 162);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 163);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 164);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 165);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 166);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 167);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 168);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 169);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 170);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 171);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 172);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 173);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 174);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 175);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 176);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 177);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 178);

} else if (tid0 == type_f32_cm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 179);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 180);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 181);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 182);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 183);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 184);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 185);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 186);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 187);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 188);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 189);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 190);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 191);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 192);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 193);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 194);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 195);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 196);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 197);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 198);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 199);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 200);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 201);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 202);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 203);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 204);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 205);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 206);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 207);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 208);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 209);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 210);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 211);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 212);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 213);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 214);

} else if (tid0 == type_f32_cm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_cm::Scalar* v1_data = (Type_f32_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 215);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 216);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 217);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 218);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 219);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 220);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 221);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 222);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 223);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 224);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 225);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 226);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 227);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 228);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 229);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 230);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 231);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 232);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 233);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 234);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 235);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 236);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 237);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 238);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 239);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 240);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 241);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 242);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 243);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 244);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 245);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 246);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 247);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 248);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 249);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 250);

} else if (tid0 == type_f32_rm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 251);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 252);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 253);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 254);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 255);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 256);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 257);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 258);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 259);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 260);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 261);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 262);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 263);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 264);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 265);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 266);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 267);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 268);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 269);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 270);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 271);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 272);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 273);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 274);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 275);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 276);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 277);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 278);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 279);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 280);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 281);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 282);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 283);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 284);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 285);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 286);

} else if (tid0 == type_f32_rm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 287);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 288);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 289);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 290);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 291);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 292);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 293);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 294);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 295);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 296);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 297);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 298);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 299);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 300);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 301);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 302);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 303);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 304);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 305);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 306);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 307);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 308);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 309);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 310);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 311);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 312);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 313);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 314);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 315);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 316);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 317);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 318);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 319);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 320);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 321);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 322);

} else if (tid0 == type_f32_rm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 323);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 324);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 325);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 326);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 327);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 328);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 329);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 330);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 331);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 332);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 333);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 334);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 335);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 336);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 337);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 338);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 339);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 340);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 341);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 342);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 343);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 344);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 345);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 346);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 347);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 348);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 349);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 350);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 351);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 352);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 353);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 354);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 355);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 356);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 357);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 358);

} else if (tid0 == type_f32_rm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 359);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 360);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 361);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 362);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 363);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 364);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 365);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 366);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 367);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 368);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 369);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 370);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 371);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 372);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 373);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 374);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 375);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 376);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 377);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 378);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 379);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 380);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 381);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 382);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 383);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 384);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 385);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 386);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 387);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 388);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 389);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 390);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 391);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 392);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 393);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 394);

} else if (tid0 == type_f32_rm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 395);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 396);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 397);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 398);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 399);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 400);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 401);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 402);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 403);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 404);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 405);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 406);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 407);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 408);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 409);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 410);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 411);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 412);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 413);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 414);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 415);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 416);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 417);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 418);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 419);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 420);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 421);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 422);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 423);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 424);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 425);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 426);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 427);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 428);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 429);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 430);

} else if (tid0 == type_f32_rm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_rm::Scalar* v1_data = (Type_f32_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 431);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 432);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 433);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 434);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 435);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 436);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 437);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 438);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 439);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 440);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 441);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 442);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 443);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 444);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 445);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 446);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 447);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 448);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 449);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 450);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 451);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 452);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 453);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 454);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 455);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 456);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 457);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 458);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 459);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 460);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 461);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 462);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 463);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 464);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 465);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 466);

} else if (tid0 == type_f32_x && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 467);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 468);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 469);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 470);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 471);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 472);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 473);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 474);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 475);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 476);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 477);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 478);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 479);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 480);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 481);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 482);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 483);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 484);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 485);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 486);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 487);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 488);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 489);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 490);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 491);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 492);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 493);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 494);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 495);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 496);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 497);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 498);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 499);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 500);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 501);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 502);

} else if (tid0 == type_f32_x && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 503);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 504);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 505);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 506);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 507);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 508);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 509);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 510);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 511);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 512);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 513);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 514);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 515);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 516);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 517);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 518);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 519);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 520);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 521);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 522);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 523);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 524);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 525);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 526);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 527);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 528);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 529);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 530);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 531);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 532);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 533);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 534);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 535);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 536);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 537);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 538);

} else if (tid0 == type_f32_x && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 539);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 540);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 541);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 542);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 543);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 544);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 545);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 546);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 547);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 548);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 549);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 550);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 551);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 552);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 553);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 554);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 555);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 556);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 557);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 558);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 559);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 560);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 561);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 562);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 563);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 564);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 565);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 566);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 567);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 568);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 569);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 570);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 571);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 572);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 573);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 574);

} else if (tid0 == type_f32_x && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 575);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 576);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 577);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 578);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 579);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 580);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 581);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 582);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 583);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 584);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 585);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 586);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 587);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 588);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 589);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 590);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 591);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 592);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 593);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 594);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 595);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 596);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 597);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 598);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 599);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 600);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 601);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 602);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 603);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 604);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 605);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 606);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 607);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 608);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 609);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 610);

} else if (tid0 == type_f32_x && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 611);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 612);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 613);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 614);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 615);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 616);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 617);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 618);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 619);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 620);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 621);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 622);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 623);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 624);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 625);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 626);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 627);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 628);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 629);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 630);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 631);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 632);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 633);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 634);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 635);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 636);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 637);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 638);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 639);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 640);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 641);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 642);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 643);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 644);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 645);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 646);

} else if (tid0 == type_f32_x && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f32_x::Scalar* v1_data = (Type_f32_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 647);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 648);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 649);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 650);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 651);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 652);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 653);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 654);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 655);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 656);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 657);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 658);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 659);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 660);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 661);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 662);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 663);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 664);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 665);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 666);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 667);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 668);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 669);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 670);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 671);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 672);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 673);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 674);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 675);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 676);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 677);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 678);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 679);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 680);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 681);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 682);

} else if (tid0 == type_f64_cm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 683);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 684);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 685);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 686);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 687);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 688);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 689);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 690);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 691);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 692);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 693);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 694);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 695);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 696);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 697);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 698);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 699);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 700);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 701);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 702);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 703);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 704);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 705);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 706);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 707);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 708);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 709);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 710);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 711);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 712);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 713);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 714);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 715);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 716);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 717);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 718);

} else if (tid0 == type_f64_cm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 719);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 720);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 721);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 722);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 723);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 724);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 725);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 726);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 727);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 728);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 729);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 730);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 731);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 732);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 733);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 734);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 735);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 736);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 737);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 738);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 739);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 740);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 741);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 742);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 743);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 744);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 745);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 746);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 747);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 748);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 749);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 750);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 751);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 752);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 753);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 754);

} else if (tid0 == type_f64_cm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 755);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 756);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 757);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 758);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 759);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 760);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 761);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 762);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 763);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 764);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 765);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 766);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 767);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 768);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 769);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 770);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 771);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 772);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 773);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 774);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 775);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 776);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 777);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 778);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 779);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 780);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 781);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 782);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 783);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 784);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 785);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 786);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 787);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 788);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 789);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 790);

} else if (tid0 == type_f64_cm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 791);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 792);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 793);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 794);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 795);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 796);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 797);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 798);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 799);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 800);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 801);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 802);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 803);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 804);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 805);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 806);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 807);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 808);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 809);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 810);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 811);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 812);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 813);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 814);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 815);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 816);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 817);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 818);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 819);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 820);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 821);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 822);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 823);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 824);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 825);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 826);

} else if (tid0 == type_f64_cm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 827);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 828);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 829);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 830);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 831);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 832);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 833);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 834);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 835);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 836);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 837);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 838);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 839);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 840);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 841);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 842);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 843);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 844);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 845);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 846);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 847);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 848);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 849);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 850);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 851);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 852);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 853);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 854);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 855);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 856);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 857);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 858);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 859);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 860);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 861);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 862);

} else if (tid0 == type_f64_cm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_cm::Scalar* v1_data = (Type_f64_cm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 863);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 864);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 865);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 866);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 867);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 868);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 869);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 870);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 871);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 872);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 873);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 874);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 875);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 876);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 877);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 878);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 879);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 880);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 881);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 882);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 883);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 884);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 885);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 886);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 887);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 888);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 889);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 890);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 891);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 892);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 893);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 894);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 895);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 896);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 897);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 898);

} else if (tid0 == type_f64_rm && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 899);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 900);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 901);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 902);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 903);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 904);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 905);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 906);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 907);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 908);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 909);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 910);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 911);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 912);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 913);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 914);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 915);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 916);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 917);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 918);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 919);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 920);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 921);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 922);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 923);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 924);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 925);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 926);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 927);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 928);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 929);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 930);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 931);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 932);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 933);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 934);

} else if (tid0 == type_f64_rm && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 935);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 936);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 937);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 938);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 939);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 940);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 941);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 942);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 943);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 944);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 945);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 946);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 947);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 948);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 949);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 950);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 951);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 952);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 953);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 954);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 955);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 956);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 957);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 958);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 959);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 960);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 961);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 962);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 963);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 964);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 965);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 966);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 967);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 968);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 969);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 970);

} else if (tid0 == type_f64_rm && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 971);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 972);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 973);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 974);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 975);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 976);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 977);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 978);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 979);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 980);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 981);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 982);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 983);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 984);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 985);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 986);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 987);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 988);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 989);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 990);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 991);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 992);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 993);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 994);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 995);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 996);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 997);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 998);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 999);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1000);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1001);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1002);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1003);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1004);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1005);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1006);

} else if (tid0 == type_f64_rm && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1007);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1008);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1009);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1010);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1011);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1012);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1013);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1014);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1015);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1016);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1017);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1018);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1019);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1020);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1021);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1022);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1023);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1024);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1025);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1026);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1027);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1028);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1029);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1030);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1031);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1032);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1033);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1034);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1035);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1036);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1037);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1038);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1039);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1040);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1041);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1042);

} else if (tid0 == type_f64_rm && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1043);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1044);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1045);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1046);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1047);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1048);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1049);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1050);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1051);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1052);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1053);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1054);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1055);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1056);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1057);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1058);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1059);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1060);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1061);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1062);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1063);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1064);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1065);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1066);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1067);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1068);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1069);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1070);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1071);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1072);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1073);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1074);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1075);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1076);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1077);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1078);

} else if (tid0 == type_f64_rm && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_rm::Scalar* v1_data = (Type_f64_rm::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v1_eigen(v1_data, v1_shape[0], v1_shape[1]);
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1079);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1080);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1081);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1082);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1083);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1084);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1085);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1086);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1087);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1088);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1089);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1090);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1091);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1092);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1093);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1094);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1095);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1096);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1097);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1098);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1099);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1100);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1101);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1102);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1103);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1104);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1105);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1106);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1107);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1108);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1109);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1110);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1111);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1112);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1113);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1114);

} else if (tid0 == type_f64_x && tid1 == type_f32_cm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_cm::Scalar* v2_data = (Type_f32_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1115);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1116);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1117);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1118);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1119);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1120);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1121);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1122);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1123);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1124);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1125);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1126);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1127);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1128);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1129);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1130);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1131);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1132);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1133);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1134);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1135);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1136);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1137);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1138);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1139);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1140);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1141);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1142);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1143);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1144);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1145);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1146);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1147);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1148);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1149);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1150);

} else if (tid0 == type_f64_x && tid1 == type_f32_rm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_rm::Scalar* v2_data = (Type_f32_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1151);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1152);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1153);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1154);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1155);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1156);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1157);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1158);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1159);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1160);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1161);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1162);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1163);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1164);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1165);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1166);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1167);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1168);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1169);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1170);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1171);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1172);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1173);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1174);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1175);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1176);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1177);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1178);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1179);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1180);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1181);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1182);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1183);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1184);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1185);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1186);

} else if (tid0 == type_f64_x && tid1 == type_f32_x && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f32_x::Scalar* v2_data = (Type_f32_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1187);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1188);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1189);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1190);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1191);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1192);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1193);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1194);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1195);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1196);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1197);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1198);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1199);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1200);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1201);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1202);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1203);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1204);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1205);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1206);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1207);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1208);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1209);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1210);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1211);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1212);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1213);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1214);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1215);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1216);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1217);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1218);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1219);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1220);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1221);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1222);

} else if (tid0 == type_f64_x && tid1 == type_f64_cm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_cm::Scalar* v2_data = (Type_f64_cm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1223);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1224);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1225);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1226);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1227);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1228);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1229);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1230);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1231);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1232);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1233);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1234);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1235);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1236);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1237);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1238);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1239);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1240);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1241);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1242);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1243);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1244);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1245);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1246);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1247);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1248);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1249);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1250);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1251);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1252);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1253);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1254);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1255);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1256);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1257);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1258);

} else if (tid0 == type_f64_x && tid1 == type_f64_rm && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_rm::Scalar* v2_data = (Type_f64_rm::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v2_eigen(v2_data, v2_shape[0], v2_shape[1]);
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1259);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1260);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1261);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1262);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1263);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1264);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_cm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_cm::Scalar* v3_data = (Type_f32_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1265);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1266);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1267);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1268);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1269);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1270);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_rm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_rm::Scalar* v3_data = (Type_f32_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1271);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1272);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1273);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1274);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1275);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1276);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f32_x && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f32_x::Scalar* v3_data = (Type_f32_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1277);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1278);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1279);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1280);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1281);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1282);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_cm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_cm::Scalar* v3_data = (Type_f64_cm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1283);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1284);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1285);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1286);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1287);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1288);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_rm && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_rm::Scalar* v3_data = (Type_f64_rm::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v3_eigen(v3_data, v3_shape[0], v3_shape[1]);
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1289);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_cm::Scalar* v4_data = (Type_f32_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1290);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_rm::Scalar* v4_data = (Type_f32_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1291);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f32_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f32_x::Scalar* v4_data = (Type_f32_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f32_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1292);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_cm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_cm::Scalar* v4_data = (Type_f64_cm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_cm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1293);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_rm) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_rm::Scalar* v4_data = (Type_f64_rm::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_rm, Eigen::Aligned> v4_eigen(v4_data, v4_shape[0], v4_shape[1]);
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1294);

} else if (tid0 == type_f64_x && tid1 == type_f64_x && tid2 == type_f64_x && tid3 == type_f64_x) {
    Type_f64_x::Scalar* v1_data = (Type_f64_x::Scalar*)(v1.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v1_eigen(v1_data, v1_shape[0], v1_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v1_strides[0], v1_strides[1]));
    Type_f64_x::Scalar* v2_data = (Type_f64_x::Scalar*)(v2.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v2_eigen(v2_data, v2_shape[0], v2_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v2_strides[0], v2_strides[1]));
    Type_f64_x::Scalar* v3_data = (Type_f64_x::Scalar*)(v3.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v3_eigen(v3_data, v3_shape[0], v3_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v3_strides[0], v3_strides[1]));
    Type_f64_x::Scalar* v4_data = (Type_f64_x::Scalar*)(v4.data(0));
    Eigen::Map<Type_f64_x, Eigen::Aligned, Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>> 
           v4_eigen(v4_data, v4_shape[0], v4_shape[1],
            Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>(v4_strides[0], v4_strides[1]));
    return std::make_tuple<int, int, int, int, int>(v1_eigen.rows(), v2_eigen.rows(), v3_eigen.rows(), v4_eigen.rows(), 1295);

} else {
    cerr << "Type not supported!" << endl;
    cerr << tid0 << ", " << tid1 << ", " << tid2 << ", " << tid3  << endl;
}
